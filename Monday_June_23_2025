--create database Monday_June_2023

--use Monday_June_2023


--CREATE TABLE Orders (
--    OrderID INT PRIMARY KEY,
--    ProviderID INT,
--    OrderDate DATE,
--    DeliveryDate DATE
--);

--INSERT INTO Orders (OrderID, ProviderID, OrderDate, DeliveryDate) VALUES
--(1, 101, '2025-06-01', '2025-06-04'),
--(2, 102, '2025-06-01', '2025-06-06'),
--(3, 101, '2025-06-02', '2025-06-05'),
--(4, 103, '2025-06-03', '2025-06-08'),
--(5, 102, '2025-06-04', '2025-06-07'),
--(6, 101, '2025-06-05', '2025-06-09'),
--(7, 104, '2025-06-06', '2025-06-09'),
--(8, 103, '2025-06-07', '2025-06-11'),
--(9, 104, '2025-06-08', '2025-06-10'),
--(10, 101, '2025-06-09', '2025-06-13'),
--(11, 102, '2025-06-10', '2025-06-13'),
--(12, 101, '2025-06-11', '2025-06-12'),
--(13, 104, '2025-06-12', '2025-06-15'),
--(14, 102, '2025-06-13', '2025-06-18'),
--(15, 103, '2025-06-14', '2025-06-16'),
--(16, 101, '2025-06-15', '2025-06-17'),
--(17, 104, '2025-06-16', '2025-06-21'),
--(18, 103, '2025-06-17', '2025-06-20'),
--(19, 101, '2025-06-18', '2025-06-23'),
--(20, 102, '2025-06-19', '2025-06-22'),
--(21, 104, '2025-06-20', '2025-06-24'),
--(22, 101, '2025-06-21', '2025-06-25'),
--(23, 102, '2025-06-22', '2025-06-24'),
--(24, 103, '2025-06-23', '2025-06-28'),
--(25, 104, '2025-06-24', '2025-06-27'),
--(26, 101, '2025-06-25', '2025-06-26'),
--(27, 103, '2025-06-26', '2025-07-01'),
--(28, 104, '2025-06-27', '2025-06-30'),
--(29, 102, '2025-06-28', '2025-07-02'),
--(30, 101, '2025-06-29', '2025-07-04');

--1. Calculate late percentage deliveries

--with cte as 
--(
--select *,
--DATEDIFF(day,orderdate,DeliveryDate) as No_Of_Days,
--case when DATEDIFF(day,orderdate,DeliveryDate) >3 then 1 else 0 end as Is_Late
--from orders
--)
--select 
--ProviderID,
--COUNT(OrderID) as Total_Orders,
--SUM(is_late) as Late_Orders,
--SUM(is_late)  * 1.0 / COUNT(OrderID)  * 100 as Late_Order_Percentage
--from cte
--group by ProviderID

--CREATE TABLE CustomerSales (
--    CustomerID INT,
--    SalesDate DATE,
--    SaleAmount DECIMAL(10,2)
--);

--INSERT INTO CustomerSales (CustomerID, SalesDate, SaleAmount) VALUES
--(1, '2024-07-10', 500),
--(2, '2024-08-15', 300),
--(3, '2024-09-01', 700),
--(4, '2024-10-05', 1200),
--(5, '2024-11-20', 200),
--(1, '2025-01-10', 100),
--(2, '2025-02-25', 800),
--(3, '2025-03-05', 200),
--(4, '2025-04-01', 600),
--(5, '2025-05-10', 900),
--(6, '2025-06-01', 1000),
--(7, '2025-01-05', 300),
--(8, '2024-12-25', 500),
--(9, '2025-03-15', 400),
--(10, '2025-04-20', 750),
--(6, '2025-06-15', 1500),
--(2, '2025-06-05', 100),
--(1, '2024-09-15', 250),
--(4, '2025-06-10', 900),
--(5, '2024-07-01', 300);

--2. Find out Top 25 % customer sales in the last year

--with cte as
--(
--select 
--CustomerID,
--SUM(SaleAmount) as Total_Amt
--from CustomerSales
--where SalesDate between '2024-01-01' and '2024-12-31'
--group by CustomerID
--),
--cte2 as
--(
--select 
--CustomerID,
--Total_Amt,
--PERCENT_RANK() over(order by Total_Amt desc) as Ranking
--from cte
--)
--select 
--CustomerID,
--Total_Amt
--from cte2
--where Ranking <=0.25





--CREATE TABLE Affiliate (
--    AffiliateID INT PRIMARY KEY,
--    AffiliateName VARCHAR(100)
--);

--INSERT INTO Affiliate (AffiliateID, AffiliateName) VALUES
--(1, 'Alpha Marketing'),
--(2, 'Beta Clicks'),
--(3, 'Gamma Sales'),
--(4, 'Delta Leads');

--CREATE TABLE Transactions (
--    TransactionID INT PRIMARY KEY,
--    TransactionDate DATETIME,
--    Amount DECIMAL(10,2),
--    ItemsOrdered INT,
--    AffiliateID INT FOREIGN KEY REFERENCES Affiliate(AffiliateID)
--);

--INSERT INTO Transactions (TransactionID, TransactionDate, Amount, ItemsOrdered, AffiliateID) VALUES
--(101, '2025-06-01', 150.00, 3, 1),
--(102, '2025-06-02', 200.00, 2, 1),
--(103, '2025-06-03', 180.00, 1, 1),
--(104, '2025-06-04', 220.00, 2, 1),
--(105, '2025-06-05', 300.00, 4, 1),
--(106, '2025-06-06', 100.00, 1, 1),
--(201, '2025-06-01', 250.00, 5, 2),
--(202, '2025-06-03', 100.00, 2, 2),
--(203, '2025-06-05', 120.00, 1, 2),
--(204, '2025-06-07', 300.00, 3, 2),
--(205, '2025-06-09', 400.00, 6, 2),
--(206, '2025-06-10', 150.00, 1, 2),
--(301, '2025-06-01', 50.00, 1, 3),
--(302, '2025-06-02', 70.00, 2, 3),
--(303, '2025-06-03', 90.00, 1, 3),
--(304, '2025-06-04', 30.00, 1, 3),
--(305, '2025-06-05', 60.00, 2, 3),
--(306, '2025-06-06', 80.00, 2, 3),
--(401, '2025-06-01', 500.00, 7, 4),
--(402, '2025-06-02', 450.00, 6, 4),
--(403, '2025-06-03', 350.00, 5, 4),
--(404, '2025-06-04', 250.00, 3, 4),
--(405, '2025-06-05', 150.00, 2, 4),
--(406, '2025-06-06', 100.00, 1, 4);

--3. Total of the last 5 transactions by affliates  

--with cte as
--(
--select 
--AffiliateName,
--TransactionDate,
--Amount,
--ROW_NUMBER() over(partition by a.AffiliateName order by transactiondate desc) as recency
--from Affiliate a
--join  Transactions t
--on a.AffiliateID = t.AffiliateID
--)
--select 
--AffiliateName,
--SUM(Amount) as Total_Amt
--from cte
--where recency <=5
--group by AffiliateName




--CREATE TABLE call_data (
--    id INT PRIMARY KEY,
--    requestid INT,
--    createdon DATETIME,
--    call_duration INT 
--);

--INSERT INTO call_data (id, requestid, createdon, call_duration) VALUES
--(1, 1001, '2025-06-01 08:00:00', 120),
--(2, 1001, '2025-06-01 09:00:00', 300),
--(3, 1001, '2025-06-01 10:30:00', 150),
--(4, 1002, '2025-06-02 08:15:00', 200),
--(5, 1002, '2025-06-02 09:45:00', 180),
--(6, 1002, '2025-06-02 10:15:00', 240),
--(7, 1003, '2025-06-03 07:30:00', 100),
--(8, 1003, '2025-06-03 08:30:00', 220),
--(9, 1003, '2025-06-03 09:00:00', 180),
--(10, 1004, '2025-06-04 11:00:00', 90),
--(11, 1004, '2025-06-04 11:45:00', 110),
--(12, 1005, '2025-06-05 14:00:00', 300),
--(13, 1005, '2025-06-05 15:00:00', 250),
--(14, 1005, '2025-06-05 16:00:00', 275),
--(15, 1006, '2025-06-06 08:00:00', 100),
--(16, 1006, '2025-06-06 08:30:00', 150),
--(17, 1006, '2025-06-06 09:00:00', 200),
--(18, 1007, '2025-06-07 10:00:00', 220),
--(19, 1007, '2025-06-07 10:30:00', 180),
--(20, 1008, '2025-06-08 13:00:00', 260),
--(21, 1008, '2025-06-08 14:00:00', 300);

--4. Calculate Average length of first call 

--with cte as
--(
--select *,
--RANK() over(partition by requestid order by createdon asc) as First_Call
--from call_data
--)
--select 
--AVG(call_duration) as Avg_First_Call_Duration
--from cte
--where First_Call = 1




--CREATE TABLE zillow_transaction (
--    state VARCHAR(2),
--    city VARCHAR(100),
--    streetaddress VARCHAR(255),
--    marketprice DECIMAL(12, 2)
--);


--INSERT INTO zillow_transaction (state, city, streetaddress, marketprice) VALUES
--('CA', 'San Diego', '1234 Ocean Dr', 850000),
--('CA', 'San Diego', '4321 Bay Ave', 790000),
--('CA', 'Los Angeles', '5678 Sunset Blvd', 950000),
--('CA', 'Los Angeles', '8765 Hollywood Blvd', 980000),
--('TX', 'Austin', '1111 Congress Ave', 550000),
--('TX', 'Austin', '2222 Lamar Blvd', 600000),
--('TX', 'Dallas', '3333 Main St', 450000),
--('TX', 'Dallas', '4444 Elm St', 470000),
--('NY', 'New York', '5555 5th Ave', 1200000),
--('NY', 'New York', '6666 Broadway', 1150000),
--('FL', 'Miami', '7777 Ocean Dr', 650000),
--('FL', 'Miami', '8888 Biscayne Blvd', 700000),
--('IL', 'Chicago', '9999 Lakeshore Dr', 500000),
--('IL', 'Chicago', '1010 Michigan Ave', 530000),
--('WA', 'Seattle', '1212 Rainier Ave', 750000),
--('WA', 'Seattle', '1313 Pine St', 780000),
--('NV', 'Las Vegas', '1414 Strip Blvd', 400000),
--('NV', 'Las Vegas', '1515 Fremont St', 420000);

--5. Find cities where the average market price is higher than the national average.

--select 
--city,
--AVG(marketprice) as Avg_Market_Price
--from zillow_transaction
--group by city
--having AVG(marketprice) > (
--                                                             select avg(marketprice) from zillow_transaction)
